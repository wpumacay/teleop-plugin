#include <iostream>
#include <thread>
#include <string>

#include <simKeyboard.hpp>

#include <simLib/simLib.h>

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <imgui.h>
#include <backends/imgui_impl_glfw.h>
#include <backends/imgui_impl_opengl3.h>

#define PLUGIN_VERSION 6

// NOLINTNEXTLINE
static LIBRARY simLib;

static std::thread g_thread; // NOLINT

static GLFWwindow* g_window = nullptr; // NOLINT

auto worker_fcn() -> void {
    if (glfwInit() != GLFW_TRUE) {
        return;
    }

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    g_window = glfwCreateWindow(640, 480, "Hello World", nullptr, nullptr);
    if (g_window == nullptr) {
        glfwTerminate();
        return;
    }

    glfwMakeContextCurrent(g_window);
    // NOLINTNEXTLINE
    if (gladLoadGLLoader((GLADloadproc)glfwGetProcAddress) == GL_FALSE) {
        std::cout << "Failed to initialize GLAD\n";
        glfwTerminate();
        return;
    }

    const std::string STR_VENDOR = 
        reinterpret_cast<const char*>(glGetString(GL_VENDOR));  // NOLINT
    const std::string STR_RENDERER =
        reinterpret_cast<const char*>(glGetString(GL_RENDERER));  // NOLINT
    const std::string STR_VERSION =
        reinterpret_cast<const char*>(glGetString(GL_VERSION));  // NOLINT

    std::cout << "Vendor    : " << STR_VENDOR << '\n';
    std::cout << "Renderer  : " << STR_RENDERER << '\n';
    std::cout << "Version   : " << STR_VERSION << '\n';

    // --------------------------------
    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO(); (void)io;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;
    io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;
    io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;
    io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;

    // --------------------------------
    // Setup Dear ImGui style
    ImGui::StyleColorsDark();

    // --------------------------------
    // Setup Platform/Renderer backends
    ImGui_ImplGlfw_InitForOpenGL(g_window, true);
    ImGui_ImplOpenGL3_Init("#version 130");

    glfwSetKeyCallback(g_window, [](GLFWwindow* window, int key, int scancode,
                                    int action, int mods) {
        if (action == GLFW_PRESS || action == GLFW_REPEAT) {
            std::cout << "Key pressed: " << key << '\n';
        }

        if (key == GLFW_KEY_ESCAPE && action == GLFW_RELEASE) {
            glfwSetWindowShouldClose(window, GLFW_TRUE);
        }
    });

    while (glfwWindowShouldClose(g_window) == GLFW_FALSE) {
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glfwPollEvents();

        // --------------------------------
        // Start the Dear ImGui frame
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplGlfw_NewFrame();
        ImGui::NewFrame();

        // --------------------------------
        // RENDER THE GUI HERE
        ImGui::ShowDemoWindow();

        // --------------------------------
        // Draw all data generated by ImGui calls
        ImGui::Render();
        // Render all ui-elements
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());

        glfwSwapBuffers(g_window);
    }

    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplGlfw_Shutdown();
    ImGui::DestroyContext();

    glfwTerminate();
}

SIM_DLLEXPORT auto simInit(SSimInit* info) -> int {
    simLib = loadSimLibrary(info->coppeliaSimLibPath);
    if (simLib == nullptr) {
        simAddLog(info->pluginName, sim_verbosity_errors,
                  "Couldn't find or correctly load the CoppeliaSim library. "
                  "Cannot start the plugin.");
        return 0;
    }

    if (getSimProcAddresses(simLib) == 0) {
        simAddLog(info->pluginName, sim_verbosity_errors,
                  "could not find all required functions in the CoppeliaSim "
                  "library. Cannot start the plugin.");
        unloadSimLibrary(simLib);
        return 0;
    }

    simAddLog(info->pluginName, sim_verbosity_infos,
              "Successfully initialized plugin");

    g_thread = std::thread(&worker_fcn);
    // Should move the join to the cleanup function?
    g_thread.join();

    return PLUGIN_VERSION;
}

SIM_DLLEXPORT auto simMsg(SSimMsg* info) -> void {}

SIM_DLLEXPORT auto simCleanup() -> void {
    unloadSimLibrary(simLib);
}
